'use strict';
const groupBy = require("lodash.groupby");
const fs = require("fs");
const yaml = require('js-yaml');
class Camel {
    constructor(config) {
        this.config = config;
    }
    async extractAndWriteApiDetailsToDisk(overwriteMarkdownFiles) {
        const markdown = require("./writers/markdown")(this.config, ".scribe");
        markdown.writeIntroAndAuthFiles();
    }
    async writeEndpointsToDisk(groupedEndpoints) {
        if (fs.existsSync(Camel.camelDir)) {
            const oldFiles = fs.readdirSync(Camel.camelDir);
            oldFiles.forEach(f => {
                if (f.startsWith('custom.')) {
                    fs.unlinkSync(Camel.camelDir + `/${f}`);
                }
            });
        }
        else {
            fs.mkdirSync(Camel.camelDir, { recursive: true });
        }
        if (fs.existsSync(Camel.cacheDir)) {
            fs.rmdirSync(Camel.cacheDir, { recursive: true });
        }
        fs.mkdirSync(Camel.cacheDir, { recursive: true });
        let fileNameIndex = 0;
        let fileName = null;
        for (let group of groupedEndpoints) {
            const content = await yaml.dump(group, {
                schema: yaml.JSON_SCHEMA,
                skipInvalid: true,
                noRefs: true,
            });
            /*
            if (count(Camel::$groupFileNames) == count($grouped)
                && isset(Camel::$groupFileNames[$group['name']])) {
                $fileName = Camel::$groupFileNames[$group['name']];
            } else {*/
            fileName = `${fileNameIndex}.yaml`;
            fileNameIndex++;
            // }
            fs.writeFileSync(`${Camel.camelDir}/${fileName}`, content);
            fs.writeFileSync(`${Camel.cacheDir}/${fileName}`, "## Autogenerated by Scribe. DO NOT MODIFY.\n\n" + content);
        }
    }
    static groupEndpoints(parsedEndpoints) {
        const groups = groupBy(parsedEndpoints, 'metadata.groupName');
        return Object.entries(groups).map(([groupName, endpoints]) => {
            var _a, _b;
            return {
                name: groupName,
                description: (_b = (_a = endpoints.find(e => { var _a; return ((_a = e.metadata) === null || _a === void 0 ? void 0 : _a.groupDescription) != null; })) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.groupDescription,
                endpoints: endpoints.map(e => e.forSerialisation()),
            };
        });
    }
    async writeExampleCustomEndpoint() {
        // We add an example to guide users in case they need to add a custom endpoint.
        if (!fs.existsSync(Camel.camelDir + '/custom.0.yaml')) {
            fs.copyFileSync(__dirname + '/../resources/example_custom_endpoint.yaml', Camel.camelDir + '/custom.0.yaml');
        }
    }
    prepareGroupedEndpointsForOutput(groupedEndpoints) {
        return [];
    }
}
Camel.camelDir = ".scribe/endpoints";
Camel.cacheDir = ".scribe/endpoints.cache";
module.exports = Camel;
//# sourceMappingURL=camel.js.map